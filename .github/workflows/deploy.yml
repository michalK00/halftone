name: Deploy with CodeDeploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      destroy_infrastructure:
        description: 'Destroy infrastructure (requires confirmation)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: eu-north-1
  ENVIRONMENT: production

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      lambda: ${{ steps.changes.outputs.lambda }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'application/backend/**'
            frontend:
              - 'application/client/**'
            lambdas:
              - 'application/lambda/**'
            infrastructure:
              - 'infrastructure/**'

  deploy-infrastructure:
    needs: changes
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./infrastructure/environments/cloud
    outputs:
      codedeploy_app_name: ${{ steps.terraform-output.outputs.codedeploy_app_name }}
      codedeploy_deployment_group: ${{ steps.terraform-output.outputs.codedeploy_deployment_group }}
      ecs_cluster_name: ${{ steps.terraform-output.outputs.ecs_cluster_name }}
      task_definition_family: ${{ steps.terraform-output.outputs.task_definition_family }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_docdb_master_username: ${{ secrets.DOCDB_MASTER_USERNAME }}
          TF_VAR_docdb_master_password: ${{ secrets.DOCDB_MASTER_PASSWORD }}

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          echo "codedeploy_app_name=$(terraform output -raw codedeploy_app_name)" >> $GITHUB_OUTPUT
          echo "codedeploy_deployment_group=$(terraform output -raw codedeploy_deployment_group_name)" >> $GITHUB_OUTPUT
          echo "ecs_cluster_name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
          echo "task_definition_family=$(terraform output -raw task_definition_family)" >> $GITHUB_OUTPUT

  deploy-backend:
    needs: [changes, deploy-infrastructure]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.infrastructure == 'true')
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./application/backend
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URI
        id: ecr-repo
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} --query 'repositories[0].repositoryUri' --output text)
          echo "repository_uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.repository_uri }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY/halftone-api:latest .
          docker push $ECR_REPOSITORY:latest

      - name: Create new task definition revision
        id: task-def
        env:
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.repository_uri }}
          IMAGE_TAG: ${{ github.sha }}
          TASK_FAMILY: ${{ needs.deploy-infrastructure.outputs.task_definition_family || format('{0}-api', env.ENVIRONMENT) }}
        run: |
          # Get current task definition
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition $TASK_FAMILY \
            --query 'taskDefinition' \
            --output json)
          
          # Update image URI in task definition
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REPOSITORY/halftone-api:latest" \
            '.containerDefinitions[0].image = $IMAGE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)')
          
          # Register new task definition
          NEW_REVISION=$(aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEF" \
            --query 'taskDefinition.revision' \
            --output text)
          
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "task_definition_arn=arn:aws:ecs:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/$TASK_FAMILY:$NEW_REVISION" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy deployment
        env:
          CODEDEPLOY_APP: ${{ needs.deploy-infrastructure.outputs.codedeploy_app_name || format('{0}-api-codedeploy', env.ENVIRONMENT) }}
          DEPLOYMENT_GROUP: ${{ needs.deploy-infrastructure.outputs.codedeploy_deployment_group || format('{0}-api-deployment-group', env.ENVIRONMENT) }}
          TASK_DEFINITION_ARN: ${{ steps.task-def.outputs.task_definition_arn }}
        run: |
          cat > appspec.yaml << EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$TASK_DEFINITION_ARN"
                  LoadBalancerInfo:
                    ContainerName: "api"
                    ContainerPort: 8080
          Hooks:
            - BeforeInstall: "BeforeInstall"
            - AfterInstall: "AfterInstall"
            - AfterAllowTestTraffic: "AfterAllowTestTraffic"
            - BeforeAllowTraffic: "BeforeAllowTraffic"
            - AfterAllowTraffic: "AfterAllowTraffic"
          EOF
          
          echo "Created appspec.yaml:"
          cat appspec.yaml
          
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$(cat appspec.yaml | base64 -w 0)\"}" \
            --query 'deploymentId' \
            --output text)
          
          echo "Created deployment with ID: $DEPLOYMENT_ID"
          
          echo "Waiting for deployment to complete..."
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          
          echo "Deployment completed successfully!"
          
          aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query 'deploymentInfo.status' --output text

  deploy-frontend:
    needs: [changes, deploy-infrastructure]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./application/client
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ./application/client/package-lock.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get frontend ECR repository URI
        id: ecr-repo
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names ${{ secrets.ECR_FRONTEND_REPOSITORY_NAME }} --query 'repositories[0].repositoryUri' --output text)
          echo "repository_uri=$REPO_URI" >> $GITHUB_OUTPUT

      - name: Build and push frontend Docker image
        env:
          ECR_REPOSITORY: ${{ steps.ecr-repo.outputs.repository_uri }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REPOSITORY/halftone-client:latest .
          docker push $ECR_REPOSITORY/halftone-client:latest

      - name: Update ECS frontend service
        run: |
          # Force new deployment for frontend (using rolling deployment)
          aws ecs update-service \
            --cluster ${{ env.ENVIRONMENT }}-cluster \
            --service ${{ env.ENVIRONMENT }}-client \
            --force-new-deployment