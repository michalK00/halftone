// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Micha≈Ç Klemens"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/collections": {
            "get": {
                "description": "Gets all collections",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collections",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.CollectionDB"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates one collection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Create collection",
                "parameters": [
                    {
                        "description": "Collection to create",
                        "name": "collections",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.createCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/collections/{collectionId}": {
            "get": {
                "description": "Gets specific collection",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.CollectionDB"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates specific collection",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Update collection",
                "parameters": [
                    {
                        "description": "Collection update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateCollectionRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.CollectionDB"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes specific collection",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Delete collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/collections/{collectionId}/galleries": {
            "get": {
                "description": "gets all galleries of a collection with collectionId.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get all galleries of a collection.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.GalleryDB"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates one gallery in collection with collectionId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Create one gallery",
                "parameters": [
                    {
                        "description": "Gallery to create",
                        "name": "galleries",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.createGalleryRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.createGalleryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/collections/{collectionId}/galleryCount": {
            "get": {
                "description": "Returns the total number of galleries in a specific collection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "collections"
                ],
                "summary": "Get gallery count for a collection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Collection ID (MongoDB ObjectID hex string)",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Gallery count",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Collection not found or invalid ID format",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/galleries/{galleryId}": {
            "get": {
                "description": "Retrieves a specific gallery by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "galleries"
                ],
                "summary": "Get gallery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.GalleryDB"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing gallery's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "galleries"
                ],
                "summary": "Update gallery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Gallery update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.updateGalleryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific gallery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "galleries"
                ],
                "summary": "Delete gallery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/galleries/{galleryId}/photos": {
            "get": {
                "description": "Retrieves all photos from a specific gallery, including their signed URLs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photos"
                ],
                "summary": "Get gallery photos",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "description": "Gallery ID (MongoDB ObjectID)",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.getPhotoResponse"
                        }
                    },
                    "404": {
                        "description": "Gallery not found or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error while retrieving photos",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates new photo entries in a gallery and returns pre-signed URLs for uploading the actual photo files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photos"
                ],
                "summary": "Upload photos to a gallery",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectId",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Photo upload requests",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.photoUploadRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created photo entries with upload URLs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.photoUploadResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or gallery ID",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Gallery not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/galleries/{galleryId}/reschedule": {
            "put": {
                "description": "Updates the expiry date for a shared gallery and disables sharing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gallery sharing"
                ],
                "summary": "Reschedule gallery sharing expiry",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectId",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reschedule sharing request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.rescheduleGallerySharingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sharing successfully rescheduled",
                        "schema": {
                            "$ref": "#/definitions/api.shareGalleryResponse"
                        }
                    },
                    "404": {
                        "description": "Gallery not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "Sharing already inactive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/galleries/{galleryId}/share": {
            "post": {
                "description": "Create a shareable link for a gallery with an expiration date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gallery sharing"
                ],
                "summary": "Share Gallery",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Gallery ID",
                        "name": "galleryId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Share Gallery Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.shareGalleryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.shareGalleryResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or expiry date",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Gallery not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "405": {
                        "description": "Sharing already active",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/photos/{photoId}": {
            "delete": {
                "description": "Deletes a specific photo by ID (Note: AWS cleanup pending implementation)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photos"
                ],
                "summary": "Delete photo",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "description": "Photo ID (MongoDB ObjectID)",
                        "name": "photoId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo successfully deleted"
                    },
                    "404": {
                        "description": "Photo not found or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error while deleting photo",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/photos/{photoId}/confirm": {
            "put": {
                "description": "Confirms that a photo has been successfully uploaded by updating its status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "photos"
                ],
                "summary": "Confirm photo upload",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "description": "Photo ID (MongoDB ObjectID)",
                        "name": "photoId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.PhotoDB"
                        }
                    },
                    "404": {
                        "description": "Photo not found or invalid ID",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error while confirming upload",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/api/v1/qr": {
            "get": {
                "description": "Generates a QR code image in PNG format from a provided URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/png"
                ],
                "tags": [
                    "QR"
                ],
                "summary": "Generate QR code image from URL",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL to encode in QR code",
                        "name": "url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "QR code image in PNG format",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing URL parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error during QR generation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.createCollectionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "api.createCollectionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "api.createGalleryRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Example Gallery"
                }
            }
        },
        "api.createGalleryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "api.getPhotoResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "originalFilename": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.photoUploadRequest": {
            "type": "object",
            "properties": {
                "originalFilename": {
                    "type": "string"
                }
            }
        },
        "api.photoUploadResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "originalFilename": {
                    "type": "string"
                },
                "presignedPostRequest": {
                    "$ref": "#/definitions/s3.PresignedPostRequest"
                }
            }
        },
        "api.rescheduleGallerySharingRequest": {
            "type": "object",
            "properties": {
                "sharingExpiry": {
                    "description": "example: \"2024-12-31T23:59:59Z\"",
                    "type": "string"
                }
            }
        },
        "api.shareGalleryRequest": {
            "type": "object",
            "properties": {
                "sharingExpiry": {
                    "description": "example: \"2024-12-31T23:59:59Z\"",
                    "type": "string"
                }
            }
        },
        "api.shareGalleryResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "galleryId": {
                    "type": "string"
                },
                "shareUrl": {
                    "type": "string"
                },
                "sharingExpiry": {
                    "type": "string"
                }
            }
        },
        "api.updateCollectionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "api.updateGalleryRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Example Gallery"
                }
            }
        },
        "domain.CollectionDB": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "domain.GalleryDB": {
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "sharingOptions": {
                    "$ref": "#/definitions/domain.SharingOptions"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "domain.PhotoDB": {
            "type": "object",
            "properties": {
                "collectionId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "galleryId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "objectKey": {
                    "type": "string"
                },
                "originalFilename": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/domain.PhotoStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "domain.PhotoStatus": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "Pending",
                "Uploaded"
            ]
        },
        "domain.SharingOptions": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "sharingCleanupJob": {
                    "type": "string"
                },
                "sharingEnabled": {
                    "type": "boolean"
                },
                "sharingExpiryDate": {
                    "type": "string"
                },
                "sharingUrl": {
                    "type": "string"
                }
            }
        },
        "fiber.Map": {
            "type": "object",
            "additionalProperties": true
        },
        "s3.PresignedPostRequest": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "Represents the Base URL to make a request to",
                    "type": "string"
                },
                "values": {
                    "description": "Values is a key-value map of values to be sent as FormData\nthese values are not encoded",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Halftone",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
